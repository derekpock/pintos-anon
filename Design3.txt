		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Derek Pockrandt
Benjamin Miller

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

The page struct contains a lot of data about the page, including a reference to
the frame. The frame struct also contains a reference to the page that it is mapped
to if any as well as a reference to the base address of the kernel. Pages do not
receive a frame reference when initialized.

The frame_alloc_and_lock() function essentially tries to execute the try_frame_alloc_and_lock()
function multiple times. The try_frame_alloc_and_lock() function searches through
the frames to locate a free one. If it fails it then looks through the frames to
pick one to evict. It picks the first one it finds that has been recently accessed.

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

The try_frame_alloc_and_lock() function requires a scan lock in order to search
for a frame. This means that there can be no other processes searching for one at
the same time so there is no race to get a free frame. To prevent any process that
fails to get a lock from giving up the frame_alloc_and_lock() function waits after
failing and tries again two more times.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files are stored in a struct within the syscall.c file called mapping.
This struct contains a reference to the file that is mapped, its mapping id, and
the number of pages mapped. Various functions can be called on these mappings like
lookup_mapping() or sys_munmap() to manipulate them as needed.

Whenever pages were evicted in the case of a memory mapped file they would either
be written to the disk(if it was dirty) or would be left alone because no changes
needed to be written to the disk. Now other pages would be swapped out with the
swap_out() function if they were dirty.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

The differences between these types did allow us to treat most of the implementation
as a single type. This is because the only time that an important difference arises
is when the pages need to be written to the disk. This is handled by a simple check
of what type it is and then the appropriate action can be taken. If it is a mmap then
it can be written to the file and if it isn't it can be written to the swap.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
